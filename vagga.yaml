containers:
  ansible:
    setup:
    - !Alpine v3.3
    - !Py2Install [ansible, ecdsa, Jinja2, MarkupSafe, paramiko==1.17.0, pycrypto, PyYAML]
    - !PipConfig
      dependencies: true
    environ:
      ANSIBLE_HOST_KEY_CHECKING: false
  app-freezer:
    setup:
    - !Alpine v3.3
    - !BuildDeps
      - libmemcached-dev
      - zlib-dev
      - libxslt-dev
      - postgresql-dev
      - mariadb-dev
      - gcc
    - !NpmInstall [bower]
    - !Py3Install
      - setuptools
      - pip
      - six
      - 'Django >=1.9,<1.10'
      - 'django-extensions >=1.6.7,<1.7'
      - 'django-debug-toolbar >=1.4,<2.0'
      - 'sqlparse <0.2.0'
      - 'django-environ >=0.4,<0.5'
      - 'pylibmc >=1.5,<1.6'
      - 'django-cache-url >=1.0,<1.1'
      - 'psycopg2 >=2.6,<2.7'
      - 'django-bootstrap3 >=7.0.1,<7.1'
      - 'redis >=2.10.5,<2.11'
      - 'rq >=0.6,<0.7'
      - 'rq-scheduler >=0.6.1,<0.7'
      - 'django-rq >=0.9.1,<1.0'
      - 'arrow >=0.7.0,<0.8'
      - 'python-dateutil >=2.5.3,<2.6'
      - 'django-rq-jobs >=0.1.5.1,<0.1.6'
      - 'mysqlclient >=1.3.7,<1.4'
      - 'gunicorn >=19.6.0,<19.7'
      - 'django-datetime-widget >=0.9.3,<1.0'
      - 'django-recurrence >=1.3.0,<1.4'
      - 'django-smart-selects >=1.2.2,<1.3'
      - 'django-npm >=1.0.0,<1.1'
      - 'django-bower >=5.1.0,<5.2'
      - 'ipython >=5.0.0,<5.1'
      - 'ipdb >=0.10.0,<1.0'
      - 'Werkzeug >=0.11.4,<0.12'
      - 'watchdog >=0.8.3,<0.9'
      - 'git+https://github.com/wk-tech/python-smsfly@v0.1.3#egg=smsfly'
    - !Sh pip uninstall --yes SMSFly
    - !Sh pip freeze > requirements.txt
    - !Sh echo '-e git+https://github.com/wk-tech/python-smsfly@v0.1.3#egg=smsfly' >> requirements.txt
    # - !Sh pip install -r requirements.txt
    # - !Sh python3 manage.py bower --pythonpath=/work freeze
  django:
    setup:
    - !Alpine v3.3
    - !Install
      - libmemcached
      - libmemcached-dev  # needed to build pylibmc python package
      - zlib
      - libxslt-dev
      - libsasl
      - libpq
      - mariadb-client
      - mariadb-dev
      - postgresql-dev  # needed to build psycopg2 python package
      - nodejs
      - sqlite
      - git
      - gcc
      - gettext
    - !EnsureDir /root/.npm
    - !EnsureDir /work/.npm
    - !PipConfig
      dependencies: true
    - !Py3Requirements requirements.txt
    - !NpmInstall [bower]
    environ:
      HOME: /work
      DATABASE_URL: sqlite:///db.sqlite3
    volumes:
      /root/.npm: !BindRW /work/.npm
  redis:
    setup:
    - !Alpine v3.3
    - !Install
      - redis
  memcached:
    setup:
    - !Alpine v3.3
    - !Install [memcached]
  postgres:
    setup:
    - !Ubuntu trusty
    - !Install [postgresql]
    - !EnsureDir /data
    # uncomment the line below to make postgres data persistent
    # - !EnsureDir /work/.db/data
    environ:
      PGDATA: /data
      PG_PORT: 5433
      PG_DB: django
      PG_USER: vagga
      PG_PASSWORD: vagga
      PG_BIN: /usr/lib/postgresql/9.3/bin
    volumes:
      /data: !Tmpfs
        size: 100M
        mode: 0o700
      # replace the volume above with the one below to make postgres data persistent
      # /data: !BindRW /work/.db/data

commands:
  run: !Command
    description: Start the django development server
    container: django
    run: python3 manage.py runserver
  manage.py: !Command
    description: Shortcut to manage.py
    container: django
    run:
    - python3
    - manage.py
  run-cached: !Supervise
    description: Start the django development server alongside memcached
    children:
      cache: !Command
        container: memcached
        run: memcached -u memcached -vv
      app: !Command
        container: django
        environ:
          HOME: /work
          CACHE_URL: memcached://127.0.0.1:11211
        run: |
            python3 manage.py migrate --pythonpath=$HOME
            echo "from npm.finders import npm_install; npm_install()" | python3 ./manage.py shell --pythonpath=$HOME
            python3 manage.py bower --pythonpath=$HOME install -- --allow-root
            python3 manage.py runserver_plus --pythonpath=$HOME --traceback
      rq: !Command
        container: django
        environ:
          HOME: /work
        run: |
            python3 manage.py rqscheduler --pythonpath=$HOME &
            while [ true ]; do sleep 60; python3 manage.py rqjobs --pythonpath=$HOME; done &
            while [ true ]; do sleep 1800; python3 manage.py sms_campaign_scheduler --pythonpath=$HOME 30; done &
            python3 manage.py rqworker --pythonpath=$HOME high default low
      redis: !Command
        container: redis
        run: |
            redis-server --daemonize no --bind 127.0.0.1
  run-postgres: !Supervise
    description: Start the django development server using Postgres database
    children:
      app: !Command
        container: django
        environ:
          DATABASE_URL: postgresql://vagga:vagga@127.0.0.1:5433/django
        run: |
            touch /work/.dbcreation # Create lock file
            while [ -f /work/.dbcreation ]; do sleep 0.2; done # Acquire lock
            python3 manage.py migrate
            python3 manage.py runserver
      db: !Command
        container: postgres
        run: |
            chown postgres:postgres $PGDATA;
            su postgres -c "$PG_BIN/pg_ctl initdb";
            su postgres -c "echo 'host all all all trust' >> $PGDATA/pg_hba.conf"
            su postgres -c "$PG_BIN/pg_ctl -w -o '-F --port=$PG_PORT -k /tmp' start";
            su postgres -c "$PG_BIN/psql -h 127.0.0.1 -p $PG_PORT -c \"CREATE USER $PG_USER WITH PASSWORD '$PG_PASSWORD';\""
            su postgres -c "$PG_BIN/createdb -h 127.0.0.1 -p $PG_PORT $PG_DB -O $PG_USER";
            rm /work/.dbcreation # Release lock
            sleep infinity
        # replace the 'run:' above with the one below to make postgres data persistent
        # run: |
        #     chown postgres:postgres $PGDATA;
        #     if [ -z $(ls -A $PGDATA) ]; then
        #       su postgres -c "$PG_BIN/pg_ctl initdb";
        #       su postgres -c "echo 'host all all all trust' >> $PGDATA/pg_hba.conf"
        #       su postgres -c "$PG_BIN/pg_ctl -w -o '-F --port=$PG_PORT -k /tmp' start";
        #       su postgres -c "$PG_BIN/psql -h 127.0.0.1 -p $PG_PORT -c \"CREATE USER $PG_USER WITH PASSWORD '$PG_PASSWORD';\""
        #       su postgres -c "$PG_BIN/createdb -h 127.0.0.1 -p $PG_PORT $PG_DB -O $PG_USER";
        #     else
        #       su postgres -c "$PG_BIN/pg_ctl -w -o '-F --port=$PG_PORT -k /tmp' start";
        #     fi
        #     rm /work/.dbcreation # Release lock
        #     sleep infinity
